
    

    
         <h3 id="前言">前言</h3>

<p>Java中经常会数组转化为List的场景，Java中的<code>Arrays</code> 中提供了一个 <code>asList</code> 方法可以快捷的转化，我们来看下面一段代码：</p>

<pre><code class="language-java">import java.util.Arrays;
import java.util.List;

public class Test {
    public static void main(String[] args) {
        String a = "a,a,a";
        List&lt;String&gt; list = Arrays.asList(a.split(","));
        list.add("b");
        System.out.println(list.size());
    }
}
</code></pre>

<p>这个会输出什么样的结果呢？</p>

<h3 id="分析">分析</h3>

<p>运行后，程序抛出了异常，如下:</p>

<pre><code>Exception in thread "main" java.lang.UnsupportedOperationException
	at java.util.AbstractList.add(AbstractList.java:148)
	at java.util.AbstractList.add(AbstractList.java:108)
	at me.codeboy.test.Test.main(Test.java:8)
</code></pre>

<p>为什么会出现这个呢，我们查看下 <code>Arrays.asList</code>  的代码:</p>

<pre><code>public static &lt;T&gt; List&lt;T&gt; asList(T... a) {
	return new ArrayList&lt;&gt;(a);
}
</code></pre>

<p>其中的 <code>ArrayList</code> 并非我们常用的 <code>java.util.ArrayList</code>, 而是 <code>Arrays</code> 中的一个内部类，同时这个内部类并没有实现 <code>add</code> 、<code>remove</code> 等操作。</p>

<pre><code class="language-java">private static class ArrayList&lt;E&gt; extends AbstractList&lt;E&gt;
    implements RandomAccess, java.io.Serializable
{
    private static final long serialVersionUID = -2764017481108945198L;
    private final E[] a;

    ArrayList(E[] array) {
        a = Objects.requireNonNull(array);
    }

    @Override
    public int size() {
        return a.length;
    }

    @Override
    public Object[] toArray() {
        return a.clone();
    }

    @Override
    @SuppressWarnings("unchecked")
    public &lt;T&gt; T[] toArray(T[] a) {
        int size = size();
        if (a.length &lt; size)
            return Arrays.copyOf(this.a, size,
                                 (Class&lt;? extends T[]&gt;) a.getClass());
        System.arraycopy(this.a, 0, a, 0, size);
        if (a.length &gt; size)
            a[size] = null;
        return a;
    }

    @Override
    public E get(int index) {
        return a[index];
    }

    @Override
    public E set(int index, E element) {
        E oldValue = a[index];
        a[index] = element;
        return oldValue;
    }

    @Override
    public int indexOf(Object o) {
        E[] a = this.a;
        if (o == null) {
            for (int i = 0; i &lt; a.length; i++)
                if (a[i] == null)
                    return i;
        } else {
            for (int i = 0; i &lt; a.length; i++)
                if (o.equals(a[i]))
                    return i;
        }
        return -1;
    }

    @Override
    public boolean contains(Object o) {
        return indexOf(o) != -1;
    }

    @Override
    public Spliterator&lt;E&gt; spliterator() {
        return Spliterators.spliterator(a, Spliterator.ORDERED);
    }

    @Override
    public void forEach(Consumer&lt;? super E&gt; action) {
        Objects.requireNonNull(action);
        for (E e : a) {
            action.accept(e);
        }
    }

    @Override
    public void replaceAll(UnaryOperator&lt;E&gt; operator) {
        Objects.requireNonNull(operator);
        E[] a = this.a;
        for (int i = 0; i &lt; a.length; i++) {
            a[i] = operator.apply(a[i]);
        }
    }

    @Override
    public void sort(Comparator&lt;? super E&gt; c) {
        Arrays.sort(a, c);
    }
}
</code></pre>

<p><code>AbstractList</code> 的实现中，默认 <code>add</code>、 <code>remove</code>方法的实现是抛出异常，这下就明白了。</p>

<pre><code class="language-java">public void add(int index, E element) {
    throw new UnsupportedOperationException();
}
public void remove(int index) {
    throw new UnsupportedOperationException();
}
</code></pre>

<h3 id="小结">小结</h3>

<p>使用 <code>Arrays.asList</code> 时，如果需要对结果进行修改，需要构建 <code>java.util.ArrayList</code> 之后在进行操作，不能在 <code>Arrays.asList</code> 的产物上直接进行操作。</p>

<blockquote>
  <p>如有任何知识产权、版权问题或理论错误，还请指正。</p>

  <p>转载请注明原作者及以上信息。</p>
</blockquote>

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

