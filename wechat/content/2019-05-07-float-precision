
    

    

    

    

    

    

    
         <p>整数、浮点数是开发中经常使用的类型，在Java中，整数常用的有 <code>Integer</code> 和 <code>Long</code> ，浮点数有 <code>Float</code> 和 <code>Double</code> 。如果使用 <code>Float</code> 来存储 <code>Integer</code> 的值可行么？粗略看上去，肯定是没问题的，下面我们看个例子:</p>

<pre><code>public class Test {
    public static void main(String[] args) {
        int a = 12345678;
        System.out.println(a);
        System.out.println((float) a);
        System.out.println(Float.valueOf(a + "").intValue());
    }
}
</code></pre>

<p>结果会输出什么呢？</p>

<pre><code>12345678
1.2345678E7
12345678
</code></pre>

<p>完全正确，不要急，我们将变量a的值调大一些，修改为 123456789，再次执行，输出结果如下:</p>

<pre><code>123456789
1.23456792E8
123456792
</code></pre>

<p>差了一些，有误差了，这个为什么呢？因为浮点数的表示是按照 <code>IEEE 754 </code>标准的，可以参考<a href="https://www.zhihu.com/question/21711083">https://www.zhihu.com/question/21711083</a> , 字节数和尾数部分见下表：</p>

<table>
  <thead>
    <tr>
      <th>类型</th>
      <th>字节数</th>
      <th>尾数长度</th>
      <th>精确范围</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Float</td>
      <td>4</td>
      <td>23</td>
      <td>-2^24 ~ 2^24</td>
    </tr>
    <tr>
      <td>Double</td>
      <td>8</td>
      <td>52</td>
      <td>-2^53 ~ 2^53</td>
    </tr>
  </tbody>
</table>

<p>因为最高位是1的缘故，加上尾数长度，可以计算出能够精确表示的范围，可以看出 <code>Float</code> 最大精确数值为 <code>16777216</code> ,<code>Double</code> 最大精确数值为 <code>9007199254740992</code> ，上文中的 <code>12345678</code> 和 <code>123456789</code> 刚好在 <code>16777216</code> 的两侧， 所以出现了上文中的结果。</p>

<h3 id="小结">小结</h3>

<p>当前时间戳的范围超过了 <code>Float</code> 的范围，在进行类型转化时已经要注意。 需要精度高的类型，可以选择 <code>BigDecimal</code> 来完成，如果明确确定对应的数值大小在精确表示范围内，也可以进行转换。</p>

<blockquote>
  <p>如有任何知识产权、版权问题或理论错误，还请指正。</p>

  <p>转载请注明原作者及以上信息。</p>
</blockquote>

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

