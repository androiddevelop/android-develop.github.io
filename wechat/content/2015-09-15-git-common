
    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    
         <p>Git是一个开源的分布式版本控制系统，用以有效、高速的处理从很小到非常大的项目版本管理。 Git 是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。</p>

<h3 id="复制完整项目">复制完整项目</h3>

<pre><code>git clone http://xxxxxx.xxx/xxxxx
</code></pre>

<h3 id="检出分支a到本地b">检出分支(a)到本地(b)</h3>

<pre><code>git checkout -b [my_local_branch] [my_remote_branch]
</code></pre>

<p>例如:把远程dev/1.0.0分支本地feature/1.0.0_my分支，</p>

<pre><code>git checkout -b feature/1.0.0_my dev/1.0.0
</code></pre>

<h3 id="跟踪分支">跟踪分支</h3>

<pre><code>git branch --set-upstream-to=origin/[my_remote_branch] [my_local_branch]
</code></pre>

<p>或者</p>

<pre><code>git push -u origin [my_remote_branch]   //注意: 会直接push一次
</code></pre>

<p>例如: 把本地feature/1.0.0_my分支管理到远程feature/1.0.0_my分支，</p>

<pre><code>git branch --set-upstream-to=origin/feature/1.0.0_my feature/1.0.0_my 
</code></pre>

<p>因为之前所建分支是从dev/1.0.0中获取，所以本地feature/1.0.0_my与远程dev/1.0.0分支关联，执行git push(不加其他)的话，feature/1.0.0_my分支的新代码将会上传至dev/1.0.0分支，所以我们需要重新关联分支，当然可以git push的时候指定远程的分支。</p>

<h3 id="提交代码">提交代码</h3>

<pre><code>git add .     //也可以部分添加，此处添加所有变动文件

git commit -am '注释说明'
</code></pre>

<h3 id="增加tag">增加tag</h3>

<pre><code>git tag -a [tag_name] -m '注释说明'   //在需要的时候打tag

git push origin [tag_name]  //上传tag到远程仓库

git push origin --tags  //推送所有本地没有提交的tag
</code></pre>

<h3 id="推送本地代码到远端">推送本地代码到远端</h3>

<pre><code>git push  //推送到默认关联分支

git push origin [remote_branch]  //推送到指定分支
</code></pre>

<h3 id="切换分支">切换分支</h3>

<pre><code>git checkout [branch_name]

git checkout -b [branch_name] //没有分支的话新建改分支
</code></pre>

<h3 id="合并分支">合并分支</h3>

<pre><code>git merge [branch_name]   //将branch_name分支合到当前分支
</code></pre>

<h3 id="获取远端更新">获取远端更新</h3>

<pre><code>git pull  //获取更新自动合并到本地分支

git fetch //获取更新单不自动合到本地分支
</code></pre>

<h3 id="查看本地分支">查看本地分支</h3>

<pre><code>git branch
</code></pre>

<h3 id="查看远程分支">查看远程分支</h3>

<pre><code>git branch -r
</code></pre>

<h3 id="删除分支">删除分支</h3>

<pre><code>git branch -d [branch_name]  //-d选项只能删除已经参与了合并的分支，对于未有合并的分支是无法删除的。如果想强制删除一个分支，可以使用-D选项
</code></pre>

<h3 id="合并分支-1">合并分支</h3>

<pre><code>git merge [branch_name]  //将名称为[brand_name]的分支与当前分支合并
</code></pre>

<h3 id="删除远程分支">删除远程分支</h3>

<pre><code>git push origin :[branch_name]
</code></pre>

<h3 id="恢复某个文件">恢复某个文件</h3>

<pre><code>git checkout -- [filename]  //注意,两个短横线左右都有空格
</code></pre>

<h3 id="撤销本地上一次提交">撤销本地上一次提交</h3>

<pre><code>git reset --soft HEAD^ 
</code></pre>

<h3 id="撤销远程最后两次提交">撤销远程最后两次提交</h3>

<pre><code>git reset --soft HEAD~2 
</code></pre>

<blockquote>
  <p>如有任何知识产权、版权问题或理论错误，还请指正。</p>

  <p>转载请注明原作者及以上信息。</p>
</blockquote>

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

